.Dd $Mdocdate$
.Dt M2 1
.Os
.Sh NAME
.Nm m2
.Nd Line-oriented macro processor
.Sh SYNOPSIS
.Nm
.Op Ar name=value ...
.Op Ar file ...
.Sh DESCRIPTION
.Nm
is a line-oriented macro processor, a
.Qq little brother
to the
.Xr m4 1
macro processor found on Unix systems.
The program can perform several functions, including:
.Bl -enum
.It
Define and expand macros.
Macros have two parts, a name and a body.
All occurrences of a macro's name are replaced with the macro's body.
Macro expansion may include parameters.
Short macros can be defined on the command line by using the form
.Ql NAME=VAL ,
or
.Ql NAME=
to define with empty value.
.It
Include files.  Special include directives in a file are
replaced with the contents of the named file.
Includes can
be nested, with one included file including another.
Included files are processed for macros.
.It
Conditional text inclusion and exclusion.
Different parts of the text can be included in the final output, often
based upon whether a macro is or is not defined.
.It
Comments are removed from the output.
.Ql @comment
commands appear on a line of their own and are dropped from the output.
.Ql @rem ...@
macros are embedded in the input text and produce no output.
Use
.Ql @ignore
for a multi-line comment.
.It
Manage multiple output data streams with diversions.
Different streams may be saved to different files.
.El
.Pp
.Nm
does not scan tokens or replace unadorned text: macro
substitution must be explicitly requested by enclosing the macro
name in
.Qq @
characters.
Thus, any occurrence of
.Ql @name@
in the input is replaced in the output by the corresponding value.
To compensate for the burden of manually invoking macro expansion,
there is no need to
.Qq quote
identifiers to protect against unwanted or inadvertent replacement.
Substitutions can occur multiple times in a single line.
.Pp
.Em Example :
.Bd -literal -offset indent -compact
@define Condition under
You are clearly @Condition@worked.
\ \ \ => You are clearly underworked.
.Ed
.Pp
No white space is allowed between
.Qq @
and the name, so a lone at-sign does not trigger macro processing in any way.
Thus, a line like
.Dl 100 dollars @ 5% annual interest.
is completely benign.
.Ss Commands
Control commands
.Po
such as
.Ql @if ,
.Ql @define ,
etc
.Pc
are distinguished by a
.Qq @
as the first character at the beginning of a line.
They consume the entire line.
Some commands have a
.Qq silent
alternative form which prints fewer error messages or performs some
slightly different function.
This form is distinguished by a leading 
.Qq s
in the command name.
For example, the silent variant to include a file is
.Ql @sinclude .
.Pp
The following table lists control commands to
evaluate, control, or define macros for subsequent processing:
.Pp
.\" This table could use a little formatting TLC...
.Bl -tag -width @if(_not)_defined -offset indent
.It @append NAME TEXT
Add TEXT to an already defined macro NAME
.It @array ARR
Declare ARR as an array
.It @break
Interrupt execution of enclosing loop.
@break is only valid inside a @for, @foreach, or @while block.
.It @case NAME [PREAMBLE ...] [@of TEXT ...] [@otherwise ...] @endcase
Evaluate value of NAME, comparing it with
each successive @of TEXT.
If a matching @of branch is found, execute the preamble (if any) and the
of-branch text and commands.
If none match, use text from @otherwise block if present.
Execution of the @otherwise block does
.Em not
execute the preamble.
(The purpose of the preamble is to provide "boiler-plate" header text for
known cases.
The text and commands of the unexpected (@otherwise) instance are expected
to compensate for the lack of a preamble.)
.It @cleardivert [N...]
Clear stream(s) specified by N.
If no arguments are provided then all streams are cleared.
See the
.Sx Streams and Diversions
section.
.It @comment [TEXT]
Comment; ignore line.  Also @@, @c, @;, and @#.
.It @continue
Continue next iteration of enclosing loop.
@continue is only valid inside a @for, @foreach, or @while block.
.It @debug [TEXT]
If debugging, send TEXT to the debug file.
.It @decr NAME [N]
Subtract N (default 1) from an already defined NAME.  See note at @incr.
.It @default NAME VAL
Like @define, but no-op if NAME already defined.
.It @define NAME TEXT
Set NAME to TEXT.
.It @divert [N]
Divert subsequent text to stream N.
Default 0 resets to standard output.
If N is negative, text is discarded.
See the
.Sx Streams and Diversions
section.
.It @dump WHAT [FILE]
Output symbol names & definitions to FILE (standard error).
.It @dumpall WHAT [FILE]
Like @dump but include System symbols.
.It @echo [TEXT]
Send TEXT to standard error; continue.  Also called @errprint.
.Ql @warn
is similar, but adds the current file name and line number to output.
Variant
.Ql @secho
does not automatically add a newline to output.
.It @else
Switch to the alternate condition branch of an @if block.
Only one @else statement is allowed per @if block.
.It @endcase
Indicate the end of a @case structure.
Also called @esac thanks to Algol\ 68.
.It @endcmd
Indicate the end of a @newcmd definition.
.It @endif
Indicate the end of an @if (or @unless) condition block.
Also called @fi, keeping the dream alive.
.It @endlongdef
Indicate the end of a multi-line @longdef.
.It @endwhile
Indicate the end of a @while or @until loop.
Also called @wend.
.It @error [TEXT]
Send TEXT to standard error; exit code 2.
Any diverted streams are discarded.
.It @esyscmd CMDLINE...
Execute CMDLINE in a subshell.
Standard output is captured into the output stream as normal.
Standard input is set to
.Pa /dev/null ,
but standard error is not modified.
The command's exit code is saved in
.Va __SYSVAL__ .
.It @eval TEXT
Parse and evaluate string TEXT as a command.
.It @exit [N]
Immediately stop parsing; exit with status N.
If N is omitted, the default value is zero.
Negative values or values greater than 126 are changed to 1.
If N is non-zero, diverted streams are discarded.
Commands deferred with @wrap are processed regardless of N value.
.It @for VAR START END [INCR] ... @next VAR
Execute a loop with VAR taking on successive
integer values specified by START and END.
Default INCR is 1.
.It @foreach VAR ARRAY ... @next VAR
Execute a loop with VAR taking on successive
values of keys to an array.
NOTE: Different Awk implementations may return keys in differing order.
.It @if EXPR ... [@else ...] @endif
Include subsequent lines of text if boolean expression is True.
If EXPR is a simple NAME, check if NAME is True.
See
.Sx Boolean Expressions
below.
.It @ignore DELIM
Ignore input until line that begins with DELIM
.It @include FILE
Read and process contents of FILE.
Variant
.Ql @sinclude
does not print an error message if FILE does not exist.
.It @incr NAME [N]
Add N (1) to an already defined NAME.
@incr and @decr may be used on both symbols and sequences.
Note: Unlike m4, @incr modifies the named symbol and produces no expansion output.
.It @initialize NAME VAL
Like @define, but error if NAME already defined
.It @input [NAME]
Read a single line from keyboard to define NAME.
If NAME is omitted, value is stored in symbol
.Va __INPUT__ .
.It @local NAME
Declare NAME as a symbol local to the current frame.
.It @longdef NAME ... @endlongdef
Set NAME to <...> (all lines until @endlongdef)
.It @newcmd NAME ... @endcmd
Create a user command NAME (lines until @endcmd)
.It @next VAR
Continue execution of next iteration of enclosing @for or @foreach loop.
.It @nextfile
Ignore remainder of current file, continue processing with the... next file.
.It @of TEXT
Begin a new branch of an enclosing @case structure
matching TEXT at run time.
Every branch's TEXT must be unique.
.It @otherwise
Begin a new branch of an enclosing @case structure
which is executed if no @of branch triggers.
Only only one @otherwise branch is permitted per @case structure.
.It @paste FILE
Insert FILE contents literally, with no changes or macros.
Variant
.Ql @spaste
does not print an error message if FILE does not exist.
.It @readarray ARR FILE
Read each line from FILE into array ARR.
Variant
.Ql @sreadarry
does not print an error message if FILE does not exist.
.It @readfile NAME FILE
Read FILE contents to define NAME.
This is not intended to be a full-blown file inputter (use @readarray
for that) but rather just to read short snippets like a file path
or username.
As usual, multi-line values are accepted but the final
trailing newline, if any, is stripped.
Variant
.Ql @sreadfile
does not print an error message if FILE does not exist.
.It @readonly NAME
Make NAME unchangeable -- cannot be undone
.It @return
Cease execution of a user command.
@return is only valid inside a @newcmd definition.
.It @sequence ID ACTION [N]
Create and manage sequences.
See the
.Sx Sequences
section.
.It @shell DELIM [PROG] ... DELIM
Evaluate input until DELIM and send raw data to PROG.
Output stream is captured; shell exit status is stored in
.Va __SYSVAL__ .
If PROG is not specified, the value of symbol
.Va M2_SHELL
will be used if defined; if not, the value of environment variable
.Ev SHELL
will be used.
If also not defined, the value of
.Va __PROG__[sh]
will be used.
.It @syscmd CMDLINE...
Execute CMDLINE using Awk's system() function.
Standard output and standard error are both discarded.
The command's exit code is saved in
.Va __SYSVAL__ .
.It @typeout
Print remainder of input file literally, no macro processing will be done.
.It @undefine NAME
Remove definition of NAME.
Symbols can also be removed from the command line with
.Ql U=<symName>
.It @undivert [N...] | N FILE
Inject stream N... (default all) into current stream.
If no arguments are provided then all streams are injected.
With second form, stream N is output to FILE.
Undiverted streams are automatically cleared.
See the
.Sx Streams and Diversions
section.
.It @unless EXPR ... [@else ...] @endif
Include subsequent text if EXPR is False.
If EXPR is a simple NAME, check if NAME == 0 (or undefined).
See
.Sx Boolean Expressions
below.
.It @until EXPR ... @endwhile
Repeatedly evaluate input lines while boolean expression is False
and stop when it becomes True.
.It @while EXPR ... @endwhile
Repeatedly evaluate input lines while boolean expression is True
and stop when it becomes False.
.It @wrap TEXT
Defer TEXT until m2 has processed all files and diversions and is about to exit.
Wrapped text will be evaluated as a command; output will occur after diverted streams, if any.
Wraps are always processed, even if @error or @exit commands are encountered.
.El
.Pp
.Nm
can incorporate the contents of files into its data stream.
.Ql @include
retrieves and processes the file data for macros, while
.Ql @paste
reads the file contents with no modifications.
Attempting to
.Ql @include
or
.Ql @paste
a non-existent file results in an error.
However, if the
.Qq silent
variants
.Po
.Ql @sinclude ,
.Ql @spaste
.Pc
are used, no message is printed.
If @include or @paste cannot find the specified FILE in the current directory,
it will consult the include path which is initialized from the
.Ev M2PATH
environment variable.
Directories can be inserted into the include path by specifying
.Ql I=<directory>
on the command line.
Paths specified this way are examined before entries from M2PATH,
to allow run-specific overrides.
The include path is also used, if needed, for file names passed on the
command line.
.Ss Functions
Specifying more than one word between
.Qq @
characters, as in
.Dl @xxxx AAA BBB CCC@
is used as a crude form of function invocation.
Macros can expand positional parameters whose actual values will be
supplied when the macro is called.
The definition should refer to $1, $2, etc.
${1} also works, so ${1}1 is distinguishable from $11.
$0 refers to the name of the macro itself.
$# is replaced with the actual number of parameters provided.
$* expands to each given parameter, separated by a space character.
When a definition refers to a parameter which is not supplied, an empty
string will used as a default value.
You may supply more parameters than needed; excess parameters are
simply ignored.
.Pp
.Em WARNING :
Parameters passed using this syntax are parsed by splitting on
white space.
This means that in:
.Dl @foo \[dq]a b\[dq] c@
.Va foo
is given three arguments: '"a', 'b"', and 'c' -- not two!
To support parameters with embedded spaces, an alternate syntax
is supported:
.Dl @foo{a b}{c}@
will provide two arguments: 'a b' and 'c'.  In order for this syntax to
be recognized, there must be no whitespace between the function name and
the first open brace; and no text at all between the final closing brace
and the trailing
.Qq @ .
.Pp
.Em Example :
.Bd -literal -offset indent -compact
@define greet Hello, $1!  m2 sends you $0ings.
@greet world@
\ \ \ => Hello, world!  m2 sends you greetings.
.Ed
.Pp
To alleviate scanning ambiguities, any characters enclosed in
at-sign braces will be recursively scanned and expanded.
Thus
.Dl @data_list[@{my_key}]@
uses the value in
.Va my_key
to look up data from
.Va data_list .
The text between the braces is implicitly interpreted as if it
were surrounded by
.Qq @
characters, so
.Ql @{SYMBOL}
is correct.
.Pp
The following definitions are recognized:
.Pp
.Bl -tag -width @right_SYM_[N]@ -offset indent
.It @basename SYM@
Base (file) name of SYM implemented in Awk.
.It @boolval [SYM]@
Output "1" if SYM is True, else "0".
.It @chr SYM@
Output character with ASCII code SYM.
.It @date@
Current date (format as __FMT__[date]).
See
.Sx Dates and Times
below.
.It @dirname SYM@
Directory name of SYM implemented in Awk.
.It @epoch@
Number of seconds since the Epoch, UTC.
See
.Sx Dates and Times
below.
.It @expr MATH@
Evaluate mathematical expression.
Variant
.Ql @sexpr
performs the same calculations but does not output the result.
However, assignments are still performed and
.Va __EXPR__
is still set.
.It @format FMT ARG ...@
Print arguments two up to six, using argument one as a format
specification string for
.Fn sprintf .
Arguments must be compatible with format string, otherwise you get to
keep all the pieces.
.It @getenv VAR@
Get value of environment variable
.Va VAR .
An error is thrown if
.Va VAR
is not defined.
To ignore error and continue with empty string, disable
.Va __STRICT__[env] .
.It @ifdef{SYMBOL}{TRUE_TEXT}{FALSE_TEXT}@
If SYMBOL is defined, return TRUE_TEXT, else return FALSE_TEXT.
The {FALSE_TEXT} clause is optional, and defaults to the empty string.
.It @ifelse{arg1}{arg2}{arg3}{arg4}...@
@ifelse@ takes three or more arguments.
If the first argument is equal to the second, then the value is the
third argument.
If not equal, and if there are more than four arguments, then the
process repeats with arguments 4, 5, 6, and 7.
Otherwise, the value is either the fourth argument if present, or null
if omitted.
All arguments must appear on the same line.\" Unfortunately!
This baroque arrangement is modeled after
.Xr m4 1 .
For a saner syntax, try the @case or @if commands.
However, @ifelse@ is a function, not a command, so it can be used
in-line with other text, which @if and @case cannot do.
.It @ifx{BOOL_EXP}{TRUE_TEXT}{FALSE_TEXT}@
Evaluate BOOL_EXP; if True, return TRUE_TEXT else return FALSE_TEXT.
All three brace-enclosed clauses must be present.
Resulting text is again processed for macro substitutions.
@ifx stands for "IF <eXpression>".
.It @ifndef{SYMBOL}{TRUE_TEXT}{FALSE_TEXT}@
If SYMBOL is
.Em not
defined, return TRUE_TEXT, else return FALSE_TEXT.
The {FALSE_TEXT} clause is optional, and defaults to the empty string.
.It @index SYM SUBSTR@
Return the position of SUBSTR within the value of SYM.
Note that
.Nm
follows the Awk convention of numbering characters in a string from 1;
this is different from m4.
If SUBSTRING is not found, the returned value is zero.
.It @lc SYM@
Lower case.
.It @left SYM [N]@
Substring of SYM from 1 to Nth character.
.It @len SYM@
Number of characters in SYM's value.
.It @ltrim SYM@
Remove leading whitespace.
.It @mid SYM BEG [LEN]@
Substring of SYM from BEG, LEN chars long.
Also called
.Ql @substr .
BEG begins the string at position 1.
.It @ord SYM@
Output ASCII code of first character in SYM.
.It @rem COMMENT@
Embedded comment text is ignored.
Variant
.Ql @srem COMMENT@
also discards preceding whitespace.
.It @right SYM [N]@
Substring of SYM from N to last character.
.It @rot13 SYM@
Output value of SYM (or literal string if SYM not defined) with rot13 text.
.It @rtrim SYM@
Remove trailing whitespace.
.It @spaces [N]@
Output N space characters  (default 1).
.It @strftime FMT@
Current date/time in user-specified format.
.It @time@
Current time (format as __FMT__[time]).
See
.Sx Dates and Times
below.
.It @trim SYM@
Remove both leading and trailing whitespace.
.It @tz@
Time zone name (format as __FMT__[tz]).
See
.Sx Dates and Times
below.
.It @uc SYM@
Upper case.
.It @utc@
Current timestamp in UTC time zone, displayed in ISO\ 8601 format (format as __FMT__[utc]).
.It @uuid@
Something that resembles a UUID: C3525388-E400-43A7-BC95-9DF5FA3C4A52
.It @xbasename SYM@
Base (file) name of SYM determined by external program.
.It @xdirname SYM@
Directory name of SYM determined by external program.
.El
.Pp
Symbols can be suffixed with "[<key>]" to form simple arrays.
.Ss System Symbols
Symbols that start and end with
.Qq __
.Po
like
.Va __FOO__
.Pc
are called
.Qq system
symbols.
Except for certain writable symbols, they cannot be created or modified by the user.
The following are pre-defined; example values, defaults, or types are shown:
.Pp
.Bl -tag -width __FMT__[number]___ -offset indent
.It __CWD__
Current working directory, including trailing slash.
.It __DATE__
m2 run start date as YYYYMMDD (eg: 19450716).
See
.Sx Dates and Times
below.
.It __DBG__[<id>]
Levels for internal debugging systems (integer).
.It __DEBUG__
Debugging enabled? (boolean, user modifiable, default FALSE).
.It __DEBUGFILE__
File path for debug and trace output (user modifiable, default
.Pa /dev/stderr ) .
.It __DIVNUM__
Current stream number.
Zero, the default value, indicates output to the terminal (standard output).
Integer values between 0 and
.Va __MAX_STREAM__
are valid.
.It __EPOCH__
Seconds since Epoch at m2 run start time.
See
.Sx Dates and Times
below.
.It __EXPR__
Value from most recent @expr ...@ result.
.It __FILE__
Current file name.
.It __FILE_UUID__
UUID unique to this file.
.It __FMT__[date]
Date format for @date@.
Default is "%Y-%m-%d"; user modifiable.
.It __FMT__[number]
Format for printing numbers (sync w/CONVFMT); user modifiable.
.It __FMT__[seq]
Format for printing sequence values.
Default is "%d"; user modifiable.
.It __FMT__[time]
Time format for @time@.
Default is "%H:%M:%S"; user modifiable.
.It __FMT__[tz]
Time format for @tz@.
Default is "%Z"; user modifiable.
.It __FMT__[utc]
Date format for @utc@.
Default is "%Y-%m-%dT%H:%M:%S%z"; user modifiable.
.It __FMT__[0]          \" bracket 0
Text output when @boolval@ is False.
Default is "0"; user modifiable.
.It __FMT__[1]          \" bracket 1
Text output when @boolval@ is True.
Default is "1"; user modifiable.
.It __GID__
Group id (effective gid).
.It __HOME__
User's home directory, including trailing slash.
.It __HOST__
Short host name (eg myhost).
.It __HOSTNAME__
FQDN host name (eg myhost.example.com).
.It __INPUT__
The data read by @input; user modifiable.
.It __LINE__
Current line number inside
.Va __FILE__ .
.It __MAX_STREAM__
The largest valid stream number, used in
.Ql @divert
and
.Ql @undivert .
Default is 9.
.It __M2_UUID__
UUID unique to this m2 run.
.It __M2_VERSION__
m2 version.
.It __NFILE__
Number of files processed so far (e.g., 2).
.It __NLINE__
Number of lines read so far from all files.
.It __OSNAME__
Operating system name.
.It __PID__
m2 process id.
.It __SECURE__
Security level (0, 1, or 2).
See
.Sx SECURITY CONSIDERATIONS
for further information.
.It __STRICT__[boolval]
If True, variables passed to
.Ql boolval
must be defined.
Default is True.
If non-strict, undefined variables are considered False.
User modifiable.
.It __STRICT__[env]
If True, environment variables must be defined.
Default is True.
If non-strict, unknown environment variables expand to an empty string.
This action can also be accomplished with @sgetenv.
User modifiable.
.It __STRICT__[file]
If True, reading a non-existent file with
.Ql @include
causes an error.
Default is True.
If non-strict, attempts to read non-existent files result in a warning message.
For completely silent behavior, use
.Ql @sinclude .
User modifiable.
.It __STRICT__[symbol]
If True, symbol names are limited to the following syntax for names:
.Dl /^[A-Za-z#_][A-Za-z#_0-9]*$/
Default is True.
If non-strict, symbol names are much more liberal!
User modifiable.
.It __STRICT__[undef]
If True, symbols inside @ signs must be defined.
Default is True.
If non-strict,
.Ql @XLERB@
or other unrecognized name will silently expand to an empty string.
User modifiable.
.It __SYNC__
Frequency to flush output (0..2).
0=end only, 1=every file (default), 2=every line.
User modifiable.
.It __SYSVAL__
Exit status of most recent @shell or @syscmd command.
.It __TIME__
m2 run start time as HHMMSS (eg 053000).
See
.Sx Dates and Times
below.
.It __TIMESTAMP__
ISO 8601 timestamp, with "T" separator.
Example: "1945-07-16T05:30:00-0600".
See
.Sx Dates and Times
below.
.It __TMPDIR__
Location for temporary files.
Default is /tmp/; user modifiable.
.It __TZ__
Time zone numeric offset from UTC (-0800).
See
.Sx Dates and Times
below.
.It __UID__
User id (effective uid).
.It __USER__
User name.
.El
.Ss Dates and Times
.Va __DATE__ ,
.Va __EPOCH__ ,
.Va __TIME__ ,
.Va __TIMESTAMP__ ,
and
.Va __TZ__
are fixed at program start and do not change.
.Ql @date@ ,
.Ql @epoch@ ,
.Ql @time@ ,
and
.Ql @tz@
do change, so you could define timestamp as:
.Dl @define timestamp @date@T@time@@__TZ__@
to generate a current timestamp.
Of course, time zones don't normally change; the point is that
.Ql @__TZ__@
prints
.Qq -0800
while
.Ql @tz@
prints
.Qq PST .
.Ss Streams and Diversions
.Nm
attempts to follow m4 in its use of
.Ql @divert
and
.Ql @undivert .
.Bl -inset
.It Em Divert :
No error message or action if argument is not an integer.
.Bl -tag -width @undivert_-1____ -compact -offset indent
.It @divert
Same as
.Ql @divert 0
.It @divert -1
All subsequent output is discarded.
.It @divert 0
Resume normal output: all subsequent output is sent
to standard output (aka stream # 0)
.It @divert N
All subsequent output is sent to stream N (1 \*(Le N \*(Le
.Va __MAX_STREAM__ )
.It @divert N1 N2...
Error!  Multiple arguments are not allowed.
.El
.It Em Undivert :
After a stream has been undiverted, it is implicitly cleared.
.Bl -tag -width @undivert_-1____ -compact -offset indent
.It @undivert
Inject all diversions, in numerical order, into current stream.
.It @undivert -1
No effect.
.It @undivert 0
No effect.
.It @undivert N
Inject only the numbered diversion into current stream.
(1 \*(Le N \*(Le
.Va __MAX_STREAM__ )
.It @undivert N1 N2...
Inject all specified diversions (in argument order, not numerical
order), if legal, into current stream.
.It @undivert N FILE
As an extension to m4's undivert, m2 allows you to
output a stream's collected text directly to a file.
Only one stream number may be specified this way.
This form is only available at security level zero.
.El
.It Em Example :
.br
.Bd -literal -offset indent -compact
@divert 1
world!
@divert
Hello,
\ \ \ => Hello,
\ \ \ => world!
.Ed
.It Em End-of-Data Processing :
There is an implicit
.Ql @divert 0
and
.Ql @undivert
performed when
.Nm
reaches the end of its input.
If you want to avoid this and discard any diverted data that has not
shipped out yet, add the following to the end of your input data:
.Bd -literal -offset indent -compact
@divert -1
@undivert
.Ed
This is the tried-and-true, vanilla m4 way of discarding diverted data.
GNU m4 and
.Nm
implement a
.Ql @cleardivert
command which performs a similar operation.
Like
.Ql @undivert ,
with no arguments, it clears all diverted streams.
.Pp
Diverted text will not be processed if m2 exits due to
.Ql @error
or
.Ql @exit
(non-zero status) commands.
However, commands specified with
.Ql @wrap
.Em are
still processed, regardless of exit status.
.El
.Ss Sequences
.Nm
supports named sequences, which are integer values.  By default,
sequences begin at zero and increment by one as appropriate.  These
defaults can be changed, and the value updated or restarted.  You create
and manage sequences with the
.Ql @sequence <ID> <ACTION> [<ARG>]
command.  Valid actions are:
.Pp
.Bl -tag -width ID_format_STR____ -compact -offset indent
.It ID [create]
Create a new sequence named ID
.It ID delete
Destroy sequence named ID
.It ID format STR
Format string used to print value (%d)
.It ID next
Increment value (no output)
.It ID prev
Decrement value (no output)
.It ID restart
Set current value to initial value
.It ID setincr N
Set increment to N (1)
.It ID setinit N
Set initial value to N (0)
.It ID setval N
Set value directly to N
.El
.Pp
To use a sequence, surround the sequence ID with
.Qq @
characters just like a macro.
This injects the current value, formatted by calling
.Fn sprintf
with the specified format.
The form
.Ql @++ID@
is used to generate an increasing sequence of values printed in a
user-customizable format.
Use
.Ql ++
as shown to increment the sequence value; use
.Ql --
to decrement.
These operators can be used in either a prefix or postfix position.
To get the current value printed in
decimal without modification or formatting, say
.Ql @ID currval@ .
.Pp
Sequence values can be modified in three ways:
.Bl -enum
.It
The
.Ql @sequence
command actions
.Ic next ,
.Ic prev ,
.Ic restart ,
and
.Ic setval
will change the value as specified without generating any output.
.It
Used inline,
.Qq ++
or
.Qq --
(prefix or postfix) will automatically
modify the sequence while outputting the desired value.
.It
The form
.Ql @ID nextval@
will increment the value and return it in decimal without special formatting.
.El
.Pp
.Em Example :
.Bd -literal -offset indent -compact
@sequence counter create
@sequence counter format # %d=
@++counter@ First header
@++counter@ Second header
\ \ \ => # 1=First header
\ \ \ => # 2=Second header
.Ed
.Ss Mathematical Expressions
The
.Ql @expr ...@
function evaluates mathematical expressions and
inserts their results.
.Ql @expr@
supports the standard arithmetic operators:
.Dl (\ \ )\ \ +\ \ -\ \ *\ \ /\ \ %\ \ ^
and the comparison operators:
.Dl <\ \ <=\ \ ==\ \ !=\ \ >=\ \ >
and return 0 or 1 as per Awk.
Logical negation is available with
.Qq \&! .
No other boolean operators are valid.
.Qq &&
and
.Qq ||
are
.Em not supported !
(However, see
.Sx Boolean Expressions
below.)
.Pp
.Ql @expr@
supports the following functions:
.Pp
.Bl -tag -width defined(sym)____ -compact -offset indent
.It abs(x)
Absolute value of x, |x|
.It acos(x)
Arc-cosine of x (-1 \*(Le x \*(Le 1)
.It asin(x)
Arc-sine of x (-1 \*(Le x \*(Le 1)
.It atan2(y,x)
Arctangent of y/x, -\*(Pi \*(Le atan2 \*(Le \*(Pi
.It ceil(x)
Ceiling of x, smallest integer \*(Ge x
.It cos(x)
Cosine of x, in radians
.It defined(sym)
1 if sym is defined, else 0
.It deg(x)
Convert radians to degrees
.It exp(x)
Exponential (anti-logarithm) of x, e^x
.It floor(x)
Floor of x, largest integer \*(Le x
.It hypot(x,y)
Hypotenuse of a right-angled triangle
.It int(x)
Integer part of x
.It log(x)
Natural logarithm of x, base e
.It log10(x)
Common logarithm of x, base 10
.It max(a,b)
The larger of a and b
.It min(a,b)
The smaller of a and b
.It pow(x,y)
Raise x to the y power, x^y
.It rad(x)
Convert degrees to radians
.It rand()
Random float, 0 \*(Le rand \*(Lt 1
.It randint(x)
Random integer, 1 \*(Le randint \*(Le x
.It round(x)
Normal rounding to nearest integer
.It sign(x)
Signum of x [-1, 0, or +1]
.It sin(x)
Sine of x, in radians
.It sqrt(x)
Square root of x
.It tan(x)
Tangent of x, in radians
.El
.Pp
.Ql @expr@
will automatically use symbols' and sequences' values in expressions.
Inside
.Ql "@expr ...@" ,
there is no need to surround symbol names
with
.Qq @
characters to retrieve their values.
.Ql @expr@
also recognizes the predefined constants
.Va e ,
.Va pi ,
and
.Va tau .
.Pp
The most recent expression value is automatically stored in
.Va __EXPR__ .
.Ql @expr@
can also assign values to symbols with the
.Qq =
assignment operator.
Assignment is itself an expression, so
.Ql @expr x=5@
assigns the value 5 to
.Va x
and also outputs the result.
To assign a value to a variable without printing, use
.Ql @define .
.Ss Boolean Expressions
Boolean expressions are used in the
.Ql @if
and
.Ql @while
commands and the
.Ql @ifx
function.
They support the
.Qq && ,
.Qq || ,
and
.Qq \&!
operators for logical AND, OR, and NOT, respectively.
Parentheses may be used to enforce evaluation order.
.Pp
The following boolean functions and syntax are supported:
.Pp
.Bl -tag -width elem_IN_array____ -compact -offset indent
.It defined(SYMBOL)
True if SYMBOL is defined
.It env(VAR)
True if variable VAR is defined in process environment
.It exists(FILE)
True if FILE exists
.It elem IN array
True if array contains elem
.El
.Pp
Any other expression is evaluated as a mathematical expression and
considered True if the result is non-zero.
.Ss User-Defined Commands
Q.\ What is the difference between
.Ql @define
and
.Ql @newcmd ?
.br
A.\ @define (and @longdef) create a symbol whose value can be substituted
in-line whenever you wish, by surrounding it with "@" characters, as in:
.br
.Bd -literal -offset indent -compact
Hello @name@, I just got a great deal on this new @item@ !!!
.Ed
You can also invoke mini "functions", little in-line functions that may
take parameters but generally produce or modify output in some way.
.Pp
Names declared with @newcmd are recognized and run in the procedure
that processes the control commands (@if, @define, etc).
These things can only be on a line of their own and (mostly) do not
produce output.
.Ss Tracing and Debugging
Tracing an
.Nm
file results in printing additional diagnostic information
to the debug file when certain triggering events occur.
It most frequently happens when a macro is expanded but there are other
possible triggers.
These lines are prefixed with "m2trace:" for easy identification.
System symbol
.Va __TRACE__
provides control over tracing output; nothing will be printed for any
event if its value is False.
Once it is True, tracing output is managed by calling the commands
.Ql @traceon
and
.Ql @traceoff ,
to control which macros will be traced, and
.Ql @tracemode
which controls various options.
.Pp
Symbol
.Va __DEBUG__
controls debugging; set it to True or False to enable or disabled debugging messages.
Debugging output is generated with the
.Ql @debug
command, or by internal m2 code.
The debug file is maintained in symbol
.Va __DEBUGFILE__ .
At security level zero, the user may specify a file path for debugging and tracing output.
At higher security levels, the debug file is forced to
.Pa /dev/stderr ,
which is also the default value.
.Bl -inset
.It Em Trace On :
Calling
.Ql @traceon
implicitly sets
.Va __TRACE__
to True.
.Bl -tag -width @tracemode_FLAGS___ -compact -offset indent
.It @traceon
Called without arguments, bare
.Ql @traceon
will trace
.Em ALL
symbols, including internal built-ins: it does this by enabling the "t"
option in the trace mode.
.It @traceon SYM...
Calling
.Ql @traceon
with one or more symbol names will enable tracing for those symbols: it
does this by setting a flag in the name table.
.El
.It Em Trace Off :
.Bl -tag -width @tracemode_FLAGS___ -compact -offset indent
.It @traceoff
Calling
.Ql @traceoff
with no arguments will clear the "t" flag from the trace modes and also set
.Va __TRACE__
to False.
No changes are made to the name table flags.
.It @traceoff SYM...
Calling
.Ql @traceoff
with one or more symbol names will disable tracing for those symbols, by
clearing the name table flag.
It makes no changes to the "t" trace mode.
The value of
.Va __TRACE__
is not changed.
.El
.It Em Trace Mode :
.Ql @tracemode
is used to control the various trace flags, of which "t" is
just one of several.
It never alters
.Va __TRACE__ .
.Pp
With no arguments, the trace flags are reset to their default values.
.\"     BSD default = eq
.\"     GNU default = aqe
.\"  m2 default is currently "ae" although this is subject to change.
.Pp
Otherwise, if the argument consists of the various flag letters shown
below, the value of trace flags is set to the argument, overriding its
previous value.
If the first character is "+" or "-", then the following letters are
either added to or removed from the existing trace flags; + and - may be
used repeatedly.
.It Em Flag letters :
These are the only values accepted by
.Ql @tracemode .
.Pp
These help format trace output:
.Bl -tag -width indent -offset indent
.It f   \" BSD & GNU
Show the name of the current input file in each trace output line.
.It l   \" BSD & GNU
Show the the current input line number in each trace output line.
.It t   \" BSD & GNU
Trace all macro calls made in this invocation of m4.
.El
.Pp
These control macro evaluation tracing:
.Bl -tag -width indent -offset indent
.It a   \" BSD & GNU
[DEFAULT] Show the actual arguments in each macro call.
This applies to all macro calls if the `t' flag is used, otherwise only
the macros covered by calls of traceon.
.It c   \" BSD & GNU
Show several trace lines for each macro call.
A line is shown when the macro is seen, but before the arguments are
collected; a second line when the arguments have been collected and a
third line after the call has completed.
.It e   \" BSD & GNU
[DEFAULT] Show the expansion of each macro call, if it is not void.
This applies to all macro calls if the `t' flag is used,
otherwise only the macros covered by calls of traceon.
.\" .It q   \" BSD & GNU
.\" .\"         q option useless to m2 because it has no quote characters
.\" [DEFAULT] Quote actual arguments and macro expansions in the
.\" display with the current quotes.
.It x   \" BSD & GNU
Add a unique `macro call id' to each line of the trace output.
This is useful in connection with the `c' flag above.
.El
.Pp
These are for miscellaneous traces:
.Bl -tag -width indent -offset indent
.It i   \" GNU only
Print a message each time the current input file is changed, giving file
name and input line number.
.It p   \" GNU only
Print a message when a named file is found through the path search
mechanism, giving the actual filename used.
.\" .It V   \" BSD & GNU
.\" [NOT IMPLEMENTED] A shorthand for all of the above flags.
.El
.El
.Sh IMPLEMENTATION NOTES
.Nm
is written in portable
.Qq standard
Awk and does not require GNU Awk or any other files.
Even later Awk additions such as
.Fn systime
are avoided.
m2 is tested for compatibility with BSD\ awk version\ 20210215,
GNU\ Awk\ 5.3.0, mawk 1.3.4\ 2024012,
and BusyBox Awk\ v1.36.1
.Sh ENVIRONMENT
.Bl -tag -width indent
.It Ev HOME
Used to access your
.Pa $HOME/.m2rc
file.
Available through symbol
.Va __HOME__ .
.It Ev M2PATH
A colon-separated list of directories to try (if necessary) for the
.Ql @include
and
.Ql @paste
commands.
Note: M2PATH does not apply to the @readfile or @readarray commands.
.It Ev M2RC
Specifies a file which, if it exists, overrides
.Pa $HOME/.m2rc
.It Ev PWD
If defined, assumed to be user's current directory; otherwise, retrieved
by invoking
.Xr pwd 1 .
Available through symbol
.Va __CWD__ .
.It Ev SHELL
Used as a possible default shell.
.It Ev TMPDIR
Used as a possible temporary directory.
.El
.Sh FILES
.Bl -tag -width indent
.It Xo
.Pa $HOME/.m2rc ,
.Pa ./.m2rc
.Xc
Initialization files are automatically read if available.
If environment variable
.Ev M2RC
exists, its file is read instead of
.Pa $HOME/.m2rc .
To inhibit automatically loading these init files, specify
.Ar init=0
on the command line.
Specifying
.Ar init=1
causes the init files to be loaded (if not done so already)
without the need to specify an input file.
.It Xo
.Pa /dev/stdin ,
.Pa /dev/stdout ,
.Pa /dev/stderr ,
.Pa /dev/tty ,
.Pa /dev/null
.Xc
I/O may be performed on these paths.
.El
.Sh EXIT STATUS
.Bl -tag -width flag -compact
.It Li 0
Normal process completion, or
.Ql @exit
command.
.It Li 1
Internal error generated by Awk error() function.
.It Li 2
User requested
.Ql @error
command in input.
.It Li 66
A file specified on command line could not be read.
.El
.Sh EXAMPLES
The following example demonstrates arrays, conditionals, and
.Ql @{...} :
.Bd -literal -offset indent
@#              Use default region if available
@if env(AWS_DEFAULT_REGION)
@define region @getenv AWS_DEFAULT_REGION@
@endif
@#              If you want your own default region, uncomment
@default region us-west-2
@#              Otherwise, m2 will exit with error message
@if ! defined(region)
@error You must provide a value for 'region' on the command line
@endif
@#              Validate region
@array valid_regions
@define valid_regions[us-east-1]
@define valid_regions[us-east-2]
@define valid_regions[us-west-1]
@define valid_regions[us-west-2]
@if ! @region@ IN valid_regions
@error Region '@region@' is not valid: choose us-{east,west}-{1,2}
@endif
@#              Configure image name according to region
@array images
@define images[us-east-1]   my-east1-image-name
@define images[us-east-2]   my-east2-image-name
@define images[us-west-1]   my-west1-image-name
@define images[us-west-2]   my-west2-image-name
@define my_image @images[@{region}]@
@#              Output begins here
Region: @region@
Image:  @my_image@
.Ed
.Sh SEE ALSO
.Xr cpp 1 ,
.Xr m4 1
.Bl -hang
.It Lk http://www.drdobbs.com/open-source/m1-a-mini-macro-processor/200001791
.It Lk https://docstore.mik.ua/orelly/unix3/sedawk/ch13_10.htm
.El
.Rs
.%A Alfred V. Aho
.%A Brian W. Kernighan
.%A Peter J. Weinberger
.%B The AWK Programming Language
.%I Addison-Wesley
.%D 1988
.%O ISBN\ 0-201-07981-X
.Re
.Ss "Other Ms"
.Bl -tag -width M8___ -offset indent
.It M
Admiral Sir Miles Messervy.
.It M1
Jon Bentley's original macro processor, the progenitor of this program.
.Rs
.%A Jon Bentley
.%T m1: A Mini Macro Processor
.%J Computer Language
.%V 7
.%N 6
.%D June 1990
.%P pp. 47\(en61
.Re
.It M2
This program.
.It M3
Kernighan & Plauger's book
.Em Software Tools
describes a macro-processor language which inspired D. M. Ritchie
to write m3, a macro processor for the AP-3 minicomputer.
Originally, the Kernighan and Plauger macro-processor, and
then m3, formed the engine for the Rational FORTRAN
preprocessor, although it was later replaced with m4.
.Rs
.%A B. W. Kernighan
.%A P. J. Plauger
.%B Software Tools
.%I Addison-Wesley
.%D 1976
.Re
.It M4
From Unix V7, a macro processor
.Dq "intended as a front end for Ratfor, C, and other languages" .
.Rs
.%A B. W. Kernighan
.%A D. M. Ritchie
.%R The M4 Macro Processor
.%Q AT&T Bell Laboratories
.%J Computing Science Technical Report
.%N 59
.%D July 1977
.Re
.It M5
Prof. A. Dain Samples at the University of Cincinnati
described and implemented M5.
.Bd -ragged -offset indent -compact
.Qo
M5 is a powerful, easy to use, general purpose macro language.
M5's syntax allows concise, formatted, and easy to read
specifications of macros while still giving the user control
over the appearance of the resulting text.  M5 macros can have
named parameters, can have an unbounded number of parameters,
and can manipulate parameters as a single unit.
.Qc
.Ed
.Bl -hang -compact
.It Lk https://compilers.iecc.com/comparch/article/92-10-076
.El
.Rs
.%A A. Dain Samples
.%T User's Guide to the M5 Macro Language
.%J m5: macro processor
.%O comp.compilers
.%D October 20, 1992
.Re
.It M5
William A. Ward, Jr., School of Computer and Information Sciences,
University of South Alabama, Mobile, Alabama, also wrote a macro
processor translator (in Awk!) named m5 dated July 23, 1999.
.Bd -ragged -offset indent -compact
.Qo
m5, unlike many macro processors, does not directly
interpret its input.  Instead it uses a two-pass approach
in which the first pass translates the input to an awk
program, and the second pass executes the awk program to
produce the final output.  Macros are defined using awk
assignment statements and their values substituted using
the substitution prefix character ($ by default).
.Qc
.Ed
.It M5
Dr. Richard Daystrom designed and built a multitronic computer
designated M-5, ca. 2268.
.Qq Not entirely successful.
.It M6
Andrew D. Hall - M6,
.Bd -ragged -offset indent -compact
.Qo
a general purpose macro processor used to port
the Fortran source code of the Altran computer algebra system.
.Qc
.Ed
.Bl -hang -compact
.It Lk http://man.cat-v.org/unix-6th/6/m6
.It Lk http://cm.bell-labs.com/cm/cs/cstr/2.pdf
.El
.Rs
.%A A. D. Hall
.%R M6 Reference Manual
.%Q Bell Laboratories
.%J Computer Science Technical Report
.%N 2
.%D 1972
.Re
.It M7
G. H. Skillman, Sandra B. Salazar, et al - M7 is a general purpose
matching filter designed and implemented at the National Bureau of
Standards, ca. 1980.
.Bd -ragged -offset indent -compact
.Qo
M7 is a pattern matching and replacement facility
developed as a UNIX tool for translating and
reformatting queries, languages, and data.  M7 operates
by first preprocessing a set of user defined macros,
then using these macros to match and replace the text in
an input string.  The enabling of the rescan option
directs M7 to match and rematch the macro patterns
against the input string until all possible replacements
have been made.  Three constructions--tags, stacks, and
counters--allow communication between different macros
and different input strings, to permit such functions as
line numbering, labeling, and argument passing.
.Qc
.Ed
.Bl -hang -compact
.\" The following line has the original, correct link.
.\"   https://www.govinfo.gov/content/pkg/GOVPUB-C13-dd583e065aac7203f7521309ec41220b/pdf/GOVPUB-C13-dd583e065aac7203f7521309ec41220b.pdf
.\" Unfortunately, it causes nroff to generate the warning "can't break line".
.\" To fix, insert a non-printing break point, which makes nroff happy but
.\" the link is no longer technically correct.  (Displayed output is correct.)
.It Lk https://www.govinfo.gov/content/pkg/GOVPUB-C13-\:dd583e065aac7203f7521309ec41220b/pdf/GOVPUB-C13-dd583e065aac7203f7521309ec41220b.pdf
.El
.It M8
A general-purpose preprocessor for metaprogramming
written by Brett Robinson.
.Bd -ragged -offset indent -compact
.Qo
M8 is a command line tool for preprocessing text files.
Its syntax is customizable, and easy to distinguish from
its surrounding text.  Custom macros can be added,
allowing it to be specialized for various uses.  M8
executes macros that match a defined regex, running
either a built-in macro, an external program, or a
remote API, and replaces the call point with the
response string.
.Qc
.Ed
.Bl -hang -compact
.It Lk https://github.com/octobanana/m8
.El
.El
.\" .Sh HISTORY
.Sh AUTHORS
.An Jon Bentley ,
.Mt jlb@research.bell-labs.com
.An Christopher Leyon ,
.Mt cleyon@gmail.com
.\" .Sh CAVEATS
.Sh BUGS
.Nm
is two steps lower than m4.
You'll probably miss something you have learned to expect.
.Pp
Self-referential/recursive macros may hang the program.
.Pp
.Nm
is designed for line-oriented, ASCII text processing.
It is not bullet-proof against all possible input.
For example, some implementations of Awk may not handle data with embedded null
('\\0') characters.
Also, UTF-8 input has not been tested.
.Pp
Left-to-right order of evaluation is not necessarily guaranteed.
.Dl @++N@ - We are now on step @N@
may not produce exactly the output you expect.
This is especially noticeable if
.Ql @{...}
is used in complex ways.
.Sh SECURITY CONSIDERATIONS
The symbol
.Ql __SECURE__
contains an integer storing the security level, which controls how
.Nm
may invoke subprocesses.
The default is zero which signifies no restrictions.
In particular, this allows the
.Ql @shell ,
.Ql @syscmd ,
and
.Ql @esyscmd
commands to attempt execution of any program the user specifies.
At secure level 1, those commands are disabled entirely.
Undiverting a stream to an output file is also prohibited.
However, programs required for
.Nm Ap s
operation (as defined in the
.Va PROG
array) are still permitted, since the user cannot modify them and they
are presumably safe to invoke.
At level 2, all external programs are prohibited, including those
normally considered safe, such as
.Xr date 1
or
.Xr hostname 1 .
This level will have a detrimental effect on
.Nm Ap s
capabilities, such as disabling
.Ql @time@
et al.
The user may raise the security level, but it cannot be lowered.
